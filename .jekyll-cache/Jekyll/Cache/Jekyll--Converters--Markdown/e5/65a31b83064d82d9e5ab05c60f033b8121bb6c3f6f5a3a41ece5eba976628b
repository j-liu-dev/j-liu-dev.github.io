I"Q<p>React Native is dominating the mobile app development landscape.<br />
<small>I tried to come up with a justification of why based on my experience.</small></p>

<h4 id="whats-react-native">Whatâ€™s React Native?</h4>
<ul>
  <li>Native Application, not Hybrid</li>
  <li>JSX and ES6+ JavaScript interface</li>
  <li>Logic - JavaScript thread</li>
  <li>UI - Main thread (and more for background computing)</li>
  <li>Cross Platform</li>
</ul>

<h4 id="how-does-it-work">How does it work</h4>
<ul>
  <li>Writing code in JSX blocks</li>
  <li>Invoke platform API to display native
elements e.g. <View> becomes UIView for
iOS and View for Android</View></li>
  <li>React Native works like a connector between
platforms</li>
  <li>Business and View logic run by different
threads</li>
</ul>

<h4 id="lifecycle-of-new-component">Lifecycle of new component</h4>
<ul>
  <li>constructor() -&gt; good place to add state
unless you are using class properties</li>
  <li>componentWillMount() -&gt; avoid using it at
all, if anything needs to be done with
component do that in DidMount</li>
  <li>render() -&gt; React Element which will be
rendered and made into native UI afterwards</li>
  <li>componentDidMount() -&gt; perfect place to
call all side effects</li>
</ul>

<h4 id="lifecycle-of-updating-component">Lifecycle of updating component</h4>
<ul>
  <li>componentWillReceiveProps(nextProps) -&gt; try to
limit yourself just to this.setState only here</li>
  <li>shouldComponentUpdate(nextProps, nextState) -&gt;
can be used for optimization</li>
  <li>componentWillUpdate(nextProps, nextState) -&gt;
component will get an update, you can do some
calculations here depending on current and next
props/states</li>
  <li>render() -&gt; As in mounting component lifecycle</li>
  <li>componentDidUpdate(prevProps, prevState) -&gt;
component got updated you can call some refs here
or similar after update</li>
</ul>

<h4 id="how-it-does-compare-with-other-solutions">How it does compare with other solutions?</h4>
<ul>
  <li>More performant than Cordova with Ionic as it is Native vs Hybrid</li>
  <li>Can reuse same code on all platforms (unlike Xamarin.iOS and Xamarin.Android,
while Xamarin.Forms has same capability)</li>
  <li>Flutter is new and not stable yet enough but it is promising as well</li>
  <li>Most complete JavaScript solution as of now</li>
</ul>

<h3 id="the-good-parts-the-final-why">The good parts (the final WHY)</h3>
<ul>
  <li>Write once, use everywhere</li>
  <li>Straightforward and easy to start if had experience with React previously</li>
  <li>Can reuse same libraries as from Web for most of the things (redux, redux-saga
etc.)</li>
  <li>Satisfying performance</li>
  <li>Community getting bigger on daily basis with plenty of packages that are getting
available</li>
  <li>Plenty of platforms that are supported with some additional packages (Windows
10, Windows 10 Mobile, OSX, Web)</li>
</ul>

<h4 id="the-bad-parts">The bad parts</h4>
<ul>
  <li>Problems with updating packages and RN itself</li>
  <li>No support for Android 64-bit (thatâ€™s need to be added as of 2019 it will be
required)</li>
  <li>Layers are pretty fast, but bridges might be bottleneck so this need to be
considered when writing a native module</li>
  <li>Rare cases where platforms JS interpreter are different (e.g. lack of Proxy within
Android - requires polyfill)</li>
</ul>

<p>React Native provides an interface (bridge) between the Native language and Javascript code. There are heated debates on whether React Native is a native or a hybrid solution.<br />
Personally, I consider React Native closer to native side, as Facebook officially claims.</p>
<blockquote>
  <p>We designed React Native such that it is possible for you to write real native code and have access to the full power of the platform.</p>
</blockquote>

<p>You can side with or against me, but React Native still rocks, so does React.</p>

:ET