I"<h3 id="team">Team</h3>

<p><a href="http://www.sigsensetech.com" target="_blank">Sigsense Technologies</a>, in its infancy, had to build an AI-driven device monitoring platform.<br />
We had the design ready, and I owned the project as the sole full-stack developer.</p>

<h3 id="contributions">Contributions</h3>

<h4 id="2-rounds-of-venture-funding">2 rounds of venture funding!</h4>

<ul>
  <li>The whole REST API using Ruby on Rails and PostgreSQL</li>
  <li>The whole front-end using ReactJS and Redux</li>
  <li>9 different types of data visualizations using D3 and Highcharts</li>
  <li>Machine learning UI that helps the underlying AI engine collect and analyze the patterns in device incidents</li>
  <li>Microservices architecture on top of Docker</li>
</ul>

<h3 id="challenges">Challenges</h3>

<p>The Machine Learning module needed some input from the users directly onto the already-rendered graphs.<br />
Specifically, I had to implement <strong>on-the-fly drawing and moving of colored pillars</strong> as a part of the graph.<br />
The target graph was built with Highchart library, and the official documentation wasnâ€™t for such use cases.</p>

<p><img src="/img/portfolio/sigsense_machine_learning.png" alt="Machine Learning UI" /></p>

<p>I did what a desperate would do. I literally dissected the libraryâ€™s source code and documented necessary interfaces one by one. When done, I put them together to build a highly interactive graph that helped users mark the incident time ranges over the metrics plot.</p>

<p><a href="/blog/2019/02/19/Challenge-And-Solution" target="_blank">Check the details of this challenge</a></p>

<h3 id="microservices-and-containerization">Microservices and Containerization</h3>
<p><img src="/img/portfolio/microservices-sigsense.png" alt="Mircoservices Architecture" width="100%" /></p>

<p>As the back-end of the product grew in terms of both complexity and scale, we needed to switch to a modularized approach.<br />
The final goal was to keep a number of standalone services that could be <strong>built, deployed, scaled and maintained independently of other existing services</strong>.</p>

<p>The application was splitted into 4 different services.</p>
<ul>
  <li>Auth</li>
  <li>Machine Learning</li>
  <li>Device Logs</li>
  <li>Company and Fleet management</li>
</ul>

<p><img src="/img/portfolio/containerization-sigsense.png" alt="Containerization using Docker" width="100%" style="border: none; margin-bottom: 0px;" /></p>

<p>Above diagram shows exactly why we decided to move forward with containerization and Docker. It also, somehow, shows the evolution in IT infrastructure space.</p>

<p>In the long run, Microservices architecture served the paradigms of <code class="highlighter-rouge">Separation of Concern</code> and <code class="highlighter-rouge">Agile Development</code> well. It also opened the door for the following benefits:</p>
<ul>
  <li>Reduced complexity (easy breakdown of team)</li>
  <li>Reduced risk (deployment in chunks)</li>
  <li>Easy maintenance (incremental upgrade of services)</li>
</ul>

<h3 id="accomplishments-my-lesson">Accomplishments, My lesson</h3>

<p>The choice of technology deeply impacts productivity. And all different choices should be given enough consideration with the longest vision involved in it.</p>

<p>Hereâ€™s the story.<br />
The Machine Learning moduleâ€™s interactive graph could have been much easier if we started with D3 in the very first place.<br />
We were short-sighted in the beginning and saw that Highchart would help us build most of the visualizations effortlessly. And there came the hardest and the unexpected.<br />
If we had <strong>considered more scenarios and use-cases</strong> of the product, we could have ended up starting with D3.
<em>In the end, we used it on 3 complicated visualizations though.</em></p>
:ET