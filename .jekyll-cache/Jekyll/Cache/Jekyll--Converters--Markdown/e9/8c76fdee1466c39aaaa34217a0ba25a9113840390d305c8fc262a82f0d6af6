I"÷H<p>Unless you are using Styled-components for styling ReactJS components, the choice of class naming convention directly affects the productivity and more.</p>

<p>Thereâ€™s no argue why we should be using some CSS preprocessors instead of plain CSS.
Read through <a href="https://www.mugo.ca/blog/7-benefits-of-using-SASS-over-conventional-CSS" target="_blank">7 benefits of using SASS over conventional CSS</a> to remind yourself of why.<br />
SASS provides 2 different syntaxes - SASS and SCSS. I prefer SCSS as it is CSS-compatible, meaning that when you rename your CSS file from <code class="highlighter-rouge">XYZ.css</code> to <code class="highlighter-rouge">XYZ.scss</code>, it immediately becomes a valid SCSS file.</p>

<p>Now, what is BEM?<br />
BEM, which stands for Block-Element-Modifier, is one of the most well-accepted CSS naming conventions.<br />
To give you a quick &amp; easy overview of what BEM looks like:</p>

<p><strong>Block (B)</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"book"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.book</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#EFEFEF</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>Element (E)</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"book"</span><span class="nt">&gt;</span>
  ...
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"book__author"</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.book__author</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#004345</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>Modifier (M)</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"book book--sold"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.book--sold</span> <span class="p">{</span>
  <span class="nl">text-decoration</span><span class="p">:</span> <span class="n">stroke</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>(reference: <a href="http://getbem.com/naming/" target="_blank">BEM â€” Block Element Modifier</a>)</p>

<p>Besides enabling a global naming rule for your project and the team, BEM provides several other advantages.</p>
<ul>
  <li>Better HTML/CSS decoupling</li>
  <li>Better CSS performance</li>
  <li>No CSS conflicts</li>
  <li>Ease of code maintenance<br />
(reference: <a href="https://www.altitudesystems.co.uk/blog/2017/july/to-bem-or-not-to-bem-that-is-the-question" target="_blank">To BEM or not to BEM? That is the question.</a>)</li>
</ul>

<p>BEM couples well with SCSS syntax. Imagine you write CSS rules for a book element.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"book"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"book__author"</span><span class="nt">&gt;</span>Napoleon Hill<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"book__title"</span><span class="nt">&gt;</span>Think and Grow Rich<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"book book--sold"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"book__author"</span><span class="nt">&gt;</span>David Schwartz<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"book__title"</span><span class="nt">&gt;</span>The Magic of Thinking Big<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.book</span> <span class="p">{</span> <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.book__author</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.book__title</span> <span class="p">{</span> <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.book--sold</span> <span class="p">{</span> <span class="nl">text-decoration</span><span class="p">:</span> <span class="n">stroke</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>
<p>Letâ€™s rewrite this rule in SCSS.</p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.book</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  
  <span class="k">&amp;</span><span class="nt">__author</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">&amp;</span><span class="nt">__title</span> <span class="p">{</span>
    <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="k">&amp;</span><span class="nt">--sold</span> <span class="p">{</span>
    <span class="nl">text-decoration</span><span class="p">:</span> <span class="n">stroke</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The nested syntax of SCSS plays a major role in the beauty of BEM blended in SCSS.</p>

<hr />
<hr />
<p>With the basic knowledge of SCSS and BEM so far, letâ€™s explore my self-found best practice for writing component styles using them.<br />
Let us assume that we are working on a project structure like the following:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>project
 - src
   - components
     - Book.jsx
     - Book.style.scss
     - Article.jsx
     - Article.style.scss
     - ...
   - containers
     - Archive.container.jsx
     - Archive.style.scss
     - ...
   - styles
   - utils
 - node_modules
 - ...

</code></pre></div></div>
<p>One of the common misconceptions when writing a component style is ignoring the name conflicts.<br />
Imagine we write styles for Book component and Article component separately.</p>

<p><strong>Book.jsx</strong></p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./Book.style.scss</span><span class="dl">'</span><span class="p">;</span>
<span class="p">...</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">({</span> <span class="nx">author</span><span class="p">,</span> <span class="nx">title</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className=</span><span class="s2">"book"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className=</span><span class="s2">"author"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">author</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className=</span><span class="s2">"title"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    ...
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>
<p><strong>Book.style.scss</strong></p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.author</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.title</span> <span class="p">{</span> <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>
<p><strong>Article.jsx</strong></p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./Article.style.scss</span><span class="dl">'</span><span class="p">;</span>
<span class="p">...</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">({</span> <span class="nx">author</span><span class="p">,</span> <span class="nx">title</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className=</span><span class="s2">"article"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className=</span><span class="s2">"author"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">author</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className=</span><span class="s2">"title"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    ...
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>
<p><strong>Article.style.scss</strong></p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.author</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.title</span> <span class="p">{</span> <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>
<p>One could falsely assume that these two styles are kept local to the respective components, but they are not. As and when these two components render on the same page, the unwanted conflicts of CSS rules occur.<br />
Note the resulting HTML page source:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
  ...
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"book"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"author"</span><span class="nt">&gt;</span>Napoleon Hill<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>Think and Grow Rich<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  ...
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"article"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"author"</span><span class="nt">&gt;</span>Jay Liu<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>BEM and SCSS in ReactJS applications<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  ...
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;style&gt;</span>
  <span class="o">...</span>
  <span class="nc">.author</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.title</span> <span class="p">{</span> <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span> <span class="p">}</span>
  <span class="o">...</span>
  <span class="nc">.author</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.title</span> <span class="p">{</span> <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span> <span class="p">}</span>
  <span class="o">...</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>
<p>The prettiest solution to the above issue is applying scopes, the unique namespaces, for each component style definitions.</p>

<p><strong>Book.style.scss</strong></p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.book</span> <span class="p">{</span>
  <span class="nc">.author</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.title</span> <span class="p">{</span>
    <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>Article.style.scss</strong></p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.article</span> <span class="p">{</span>
  <span class="nc">.author</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.title</span> <span class="p">{</span>
    <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If you chose to use BEM, the namespacing of component styles would come naturally, and you donâ€™t need to stress about remembering it every time. Meanwhile, your application benefits from the aforementioned BEM advantages as well.</p>

<p><strong>Book.style.scss</strong></p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.book</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nt">__author</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">&amp;</span><span class="nt">__title</span> <span class="p">{</span>
    <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>Article.style.scss</strong></p>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.article</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nt">__author</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">&amp;</span><span class="nt">__title</span> <span class="p">{</span>
    <span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">underline</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Caution:</strong> Stick to the habit of assigning UNIQUE class names to the root DOM elements of your components. Otherwise, the conflicts of CSS rules will happen.</p>
:ET